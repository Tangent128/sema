
# Initial configuration; variables like CC & LD
# may be overriden in the generated ./config file

# determine root level of project & load vfind
ROOT=.
while test ! -e $ROOT/redo/redo-vpath.sh ; do
	ROOT="$ROOT/.."
done

. $ROOT/redo/redo-vpath.sh

# vfind loaded, change to real target directory if relevant
test "$4" && cd "$4"

# get absolute target root
ROOT=$(cd $ROOT ; pwd)

# establish dependencies
redo-ifchange $(vfind $ROOT/config.base)
redo-ifchange $ROOT/config

# C compiler command
CC="gcc -Wall -c"

# linker command
LD="gcc -Wall"

# lua/luac commands
LUA=$ROOT/liblua/lua
LUAC="$ROOT/liblua/luac -s"

# Libpath-related C flags
LIBS="-llua -lm"

# Lua dependencies
LUADEP_INC="$ROOT/liblua/lua.h $ROOT/liblua/lualib.h $ROOT/liblua/lauxlib.h $ROOT/liblua/luaconf.h"
LUADEP_LIB="liblua/liblua.a"
LUAINC="-I$ROOT/liblua"
LUALIB="-Lliblua"
LUADEP="$LUA"
LUACDEP="$LUAC"

# handy command ./config can run to clear dependency/use of included lua
# (out of tree builds do not play nice with included lua, so you'll need this for them)
useInstalledLua() {
	LUADEP_INC=
	LUADEP_LIB=
	LUAINC=
	LUALIB=
	LUADEP=
	LUACDEP=
	LUA=lua
	LUAC="luac -s"
}

# utility functions, likely no need to edit
OUTFILE=$3

compileLua() {
	redo-ifchange $LUACDEP $1
	$LUAC -o $OUTFILE $1
}

compileC() {
	redo-ifchange $LUADEP_INC $*
	$CC $LUAINC $* -o $OUTFILE
}

link() {
	redo-ifchange $LUADEP_LIB $*
	$LD "$LUALIB" $* $LIBS -o $OUTFILE
}

# load custom config

. $ROOT/config

